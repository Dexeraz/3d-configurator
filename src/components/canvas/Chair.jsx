/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/chair.gltf
*/

import React from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useCustomization } from "../../contexts/Custamization";

const loadTextureProps = (normalMap, roughnessMap, aoMap) => {
  const textureProps = useTexture({ normalMap, roughnessMap, aoMap });
  textureProps.normalMap.repeat.set(3, 3);
  textureProps.roughnessMap.repeat.set(3, 3);
  textureProps.aoMap.repeat.set(3, 3);
  textureProps.normalMap.wrapS = textureProps.normalMap.wrapT =
    THREE.MirroredRepeatWrapping;
  textureProps.roughnessMap.wrapS = textureProps.roughnessMap.wrapT =
    THREE.MirroredRepeatWrapping;
  textureProps.aoMap.wrapS = textureProps.aoMap.wrapT = THREE.RepeatWrapping;
  return textureProps;
};

const preloadTextures = () => {
  useTexture.preload([
    "./textures/leather/Leather_008_Normal.jpg",
    "./textures/leather/Leather_008_Roughness.jpg",
    "./textures/leather/Leather_008_Ambient Occlusion.jpg",
    "./textures/fabric/Fabric_Knitted_006_normal.jpg",
    "./textures/fabric/Fabric_Knitted_006_roughness.jpg",
    "./textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg",
  ]);
};

const Chair = (props) => {
  const { nodes, materials } = useGLTF("public/models/chair.gltf");
  const { material, legs, chairColor, cushionColor } = useCustomization();

  const leatherTextureProps = loadTextureProps(
    "./textures/leather/Leather_008_Normal.jpg",
    "./textures/leather/Leather_008_Roughness.jpg",
    "./textures/leather/Leather_008_Ambient Occlusion.jpg"
  );

  const fabricTextureProps = loadTextureProps(
    "./textures/fabric/Fabric_Knitted_006_normal.jpg",
    "./textures/fabric/Fabric_Knitted_006_roughness.jpg",
    "./textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg"
  );

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Chair.geometry} castShadow>
        <meshStandardMaterial
          {...(material === "leather"
            ? leatherTextureProps
            : fabricTextureProps)}
          color={chairColor.color}
        />
      </mesh>
      <mesh
        geometry={nodes.Cushion.geometry}
        position={[0, 0.06, 0.04]}
        castShadow
      >
        <meshStandardMaterial
          {...fabricTextureProps}
          color={cushionColor.color}
        />
      </mesh>
      <mesh
        geometry={nodes.Legs1.geometry}
        material={materials.Legs}
        visible={legs === 1}
        castShadow
      />
      <mesh
        geometry={nodes.Legs2.geometry}
        material={materials.Legs}
        visible={legs === 2}
      />
    </group>
  );
}

export default Chair;

useGLTF.preload("public/models/chair.gltf");
